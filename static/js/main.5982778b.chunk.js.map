{"version":3,"sources":["components/TodoAdd.tsx","components/TodoList.tsx","components/ColorModeSwitcher.tsx","components/TopBar.tsx","components/data.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddTask","useTaskContext","newTask","setNewTask","addTask","pt","templateColumns","columnGap","value","onChange","e","target","placeholder","onClick","TodoListItems","tasks","updateTask","toggleTask","removeTask","map","task","id","mx","text","currentTarget","TodoList","ColorModeSwitcher","props","toggleColorMode","useColorMode","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","icon","aria-label","TopBar","context","loadTasks","Error","isDone","App","theme","maxWidth","margin","p","TodoAdd","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAmBeA,MAdf,WAAoB,IAAD,EACwBC,cAAhCC,EAAO,EAAPA,QAASC,EAAU,EAAVA,WAAYC,EAAO,EAAPA,QAE9B,OACE,eAAC,IAAI,CAACC,GAAI,EAAGC,gBAAgB,UAAUC,UAAU,IAAG,UAClD,cAAC,IAAK,CAACC,MAAON,EAASO,SAAU,SAACC,GAAC,OAAGP,EAAWO,EAAEC,OAAOH,QAAQI,YAAY,aAC9E,cAAC,IAAM,CAACC,QAAS,WACbT,KACF,SAAC,iB,yBCPT,SAASU,IAAiB,IAAD,EAE+Bb,cAA7Cc,EAAK,EAALA,MAAOC,EAAU,EAAVA,WAAYC,EAAU,EAAVA,WAAYC,EAAU,EAAVA,WAEtC,OACI,mCACKH,EAAMI,KAAI,SAACC,GAAkC,OAC1C,eAAC,IAAI,CAACf,GAAI,EAAE,UACR,cAAC,IAAQ,CAACQ,QAAS,WAAOI,EAAYG,EAAKC,OAC3C,cAAC,IAAK,CAACC,GAAI,EAAGd,MAAOY,EAAKG,KAAMd,SAAU,SAACC,GACvCM,EAAWI,EAAKC,GAAIX,EAAEc,cAAchB,UAExC,cAAC,IAAM,CACHK,QAAS,WAAQK,EAAWE,EAAKC,KAAK,SACzC,aAPaD,EAAKC,SAyBxBI,MAVf,WAEI,OACI,qCACI,cAAC,IAAO,UAAC,cACT,cAACX,EAAa,Q,gCC1BbY,EAAsD,SAAAC,GAAU,IACnEC,EAAoBC,cAApBD,gBACFL,EAAOO,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAU,aACTC,KAAK,KACLC,SAAS,KACTC,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXzB,QAASe,EACTW,KAAM,cAACR,EAAU,IACjBS,aAAA,oBAAyBjB,EAAI,UACzBI,KCKKc,MAjBf,WACI,IAAMC,EAAUzC,cACT0C,EAAaD,EAAbC,UACP,IAAKD,EACD,MAAM,IAAIE,MAAM,SAKpB,OACI,eAAC,IAAI,CAACvC,GAAI,EAAGC,gBAAgB,UAAUC,UAAU,IAAG,UAChD,cAAC,EAAiB,IAClB,cAAC,IAAM,CAACM,QANO,WACnB8B,ECdG,CACH,CACItB,GAAI,EACJE,KAAM,YACNsB,QAAQ,GAEZ,CACIxB,GAAI,EACJE,KAAM,oBACNsB,QAAQ,GAEZ,CACIxB,GAAI,EACJE,KAAM,QACNsB,QAAQ,MDKwB,SAAC,aEbtC,SAASC,IAEZ,OACI,cAAC,IAAc,CAACC,MAAOA,QAAM,SACzB,cAAC,IAAY,UAET,eAAC,IAAG,CAACC,SAAS,MAAMC,OAAO,OAAOC,EAAG,EAAE,UACnC,cAAC,EAAM,IACP,cAAC,EAAQ,IACT,cAACC,EAAO,WChB5B,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,eAAC,aAAgB,WACf,cAAC,IAAe,IAChB,cAAChB,EAAG,OAENiB,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5982778b.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\nimport { Button, Input, Grid } from '@chakra-ui/react'\r\nimport {useTaskContext} from \"todo-state-manager-react\";\r\n\r\nfunction AddTask() {\r\n    const {newTask, setNewTask, addTask} = useTaskContext()\r\n\r\n  return (\r\n    <Grid pt={2} templateColumns=\"5fr 1fr\" columnGap=\"3\">\r\n      <Input value={newTask} onChange={(e)=>setNewTask(e.target.value)} placeholder=\"New task\" />\r\n      <Button onClick={()=>{\r\n          addTask()\r\n      }}>\r\n          Add Task</Button>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default AddTask","import * as React from 'react'\r\n\r\nimport {Button, Checkbox, Flex, Heading, Input} from '@chakra-ui/react'\r\nimport {useTaskContext} from \"todo-state-manager-react\";\r\n\r\n\r\nfunction TodoListItems() {\r\n\r\n    const {tasks, updateTask, toggleTask, removeTask} = useTaskContext()\r\n\r\n    return (\r\n        <>\r\n            {tasks.map((task: { id: number; text: string }) => (\r\n                <Flex pt={2} key={task.id}>\r\n                    <Checkbox onClick={() => {toggleTask( task.id)}} />\r\n                    <Input mx={2} value={task.text} onChange={(e) => {\r\n                        updateTask(task.id, e.currentTarget.value)\r\n                    }}/>\r\n                    <Button\r\n                        onClick={() => { removeTask(task.id)}}\r\n                    >\r\n                        Delete</Button>\r\n                </Flex>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction TodoList() {\r\n\r\n    return (\r\n        <>\r\n            <Heading>Todo List</Heading>\r\n            <TodoListItems/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import * as React from 'react'\r\n\r\nimport { useColorMode, useColorModeValue, IconButton, IconButtonProps } from '@chakra-ui/react'\r\nimport { FaMoon, FaSun } from 'react-icons/fa'\r\n\r\ntype ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>\r\n\r\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = props => {\r\n  const { toggleColorMode } = useColorMode()\r\n  const text = useColorModeValue('dark', 'light')\r\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\r\n\r\n  return (\r\n    <IconButton\r\n      size=\"md\"\r\n      fontSize=\"lg\"\r\n      variant=\"ghost\"\r\n      color=\"current\"\r\n      marginLeft=\"2\"\r\n      onClick={toggleColorMode}\r\n      icon={<SwitchIcon />}\r\n      aria-label={`Switch to ${text} mode`}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","import * as React from 'react'\r\n\r\nimport {Button, Grid} from '@chakra-ui/react'\r\n\r\n\r\nimport {ColorModeSwitcher} from './ColorModeSwitcher'\r\nimport {getData} from \"./data\";\r\nimport {useTaskContext} from \"todo-state-manager-react\";\r\n\r\n\r\nfunction TopBar() {\r\n    const context = useTaskContext()\r\n    const {loadTasks} = context\r\n    if (!context) {\r\n        throw new Error(\"Error\")\r\n    }\r\n    const onClickHandler = () => {\r\n        loadTasks(getData())\r\n    }\r\n    return (\r\n        <Grid pt={2} templateColumns=\"1fr 1fr\" columnGap=\"3\">\r\n            <ColorModeSwitcher/>\r\n            <Button onClick={onClickHandler}>Load</Button>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default TopBar\r\n","\r\n//имитация загрузки данных\r\nexport const getData = () => {\r\n    return [\r\n        {\r\n            id: 1,\r\n            text: 'Get money',\r\n            isDone: false,\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'Buy what you need',\r\n            isDone: false,\r\n        },\r\n        {\r\n            id: 3,\r\n            text: 'Enjoy',\r\n            isDone: false,\r\n        }\r\n    ]\r\n}","import * as React from 'react'\r\n\r\nimport {ChakraProvider, Box, theme} from '@chakra-ui/react'\r\n\r\nimport TodoAdd from './components/TodoAdd'\r\nimport TodoList from './components/TodoList'\r\nimport TopBar from './components/TopBar'\r\nimport {TaskProvider} from \"todo-state-manager-react\";\r\n\r\nexport function App() {\r\n\r\n    return (\r\n        <ChakraProvider theme={theme}>\r\n            <TaskProvider>\r\n\r\n                <Box maxWidth=\"8xl\" margin=\"auto\" p={5}>\r\n                    <TopBar />\r\n                    <TodoList />\r\n                    <TodoAdd />\r\n                </Box>\r\n\r\n            </TaskProvider>\r\n        </ChakraProvider>\r\n    )\r\n}\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import * as React from 'react'\r\n\r\nimport { ColorModeScript } from '@chakra-ui/react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { App } from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}